# Directory structure:
# vegetable_store/
# ├── app.py
# ├── static/
# │   ├── css/
# │   │   └── styles.css
# │   └── js/
# │       └── main.js
# └── templates/
#     ├── index.html
#     ├── cart.html
#     └── checkout.html

# app.py
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import uuid

app = Flask(__name__)
CORS(app)

# In-memory data store
vegetables = [
    {"id": 1, "name": "Tomato", "price": 2.5, "image": "tomato.jpg", "stock": 100},
    {"id": 2, "name": "Cucumber", "price": 1.5, "image": "cucumber.jpg", "stock": 80},
    {"id": 3, "name": "Carrot", "price": 1.0, "image": "carrot.jpg", "stock": 120},
]
orders = []

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/cart')
def cart():
    return render_template('cart.html')

@app.route('/checkout')
def checkout():
    return render_template('checkout.html')

@app.route('/api/vegetables', methods=['GET'])
def get_vegetables():
    return jsonify(vegetables)

@app.route('/api/order', methods=['POST'])
def create_order():
    order_data = request.json
    order_id = str(uuid.uuid4())
    order = {
        "id": order_id,
        "items": order_data['items'],
        "total": order_data['total'],
        "customer": order_data['customer']
    }
    orders.append(order)
    
    # Update stock
    for item in order['items']:
        for veg in vegetables:
            if veg['id'] == item['id']:
                veg['stock'] -= item['quantity']
    
    return jsonify({"order_id": order_id, "message": "Order placed successfully"})

if __name__ == '__main__':
    app.run(debug=True)

# templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VeggieMart - Online Vegetable Store</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <header>
        <h1>VeggieMart</h1>
        <nav>
            <a href="/">Home</a>
            <a href="/cart">Cart (<span id="cart-count">0</span>)</a>
        </nav>
    </header>
    <main>
        <div id="vegetable-list" class="vegetable-grid"></div>
    </main>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

# templates/cart.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cart - VeggieMart</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <header>
        <h1>VeggieMart</h1>
        <nav>
            <a href="/">Home</a>
            <a href="/cart">Cart (<span id="cart-count">0</span>)</a>
        </nav>
    </header>
    <main>
        <h2>Your Cart</h2>
        <div id="cart-items"></div>
        <div id="cart-total">Total: $0.00</div>
        <button id="checkout-btn" disabled>Proceed to Checkout</button>
    </main>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

# templates/checkout.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - VeggieMart</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <header>
        <h1>VeggieMart</h1>
        <nav>
            <a href="/">Home</a>
            <a href="/cart">Cart (<span id="cart-count">0</span>)</a>
        </nav>
    </header>
    <main>
        <h2>Checkout</h2>
        <div id="order-summary"></div>
        <div class="customer-form">
            <h3>Shipping Information</h3>
            <input type="text" id="name" placeholder="Full Name" required>
            <input type="text" id="address" placeholder="Address" required>
            <input type="email" id="email" placeholder="Email" required>
            <button id="place-order-btn">Place Order</button>
        </div>
        <div id="order-confirmation" style="display: none;"></div>
    </main>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

# static/css/styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

header {
    background-color: #4CAF50;
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

nav a {
    color: white;
    margin: 0 1rem;
    text-decoration: none;
}

main {
    padding: 2rem;
}

.vegetable-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
}

.vegetable-card {
    border: 1px solid #ddd;
    padding: 1rem;
    text-align: center;
}

.vegetable-card img {
    max-width: 100%;
    height: auto;
}

button {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    margin: 0.5rem;
}

button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #ddd;
    padding: 0.5rem 0;
}

.customer-form {
    max-width: 400px;
    margin: 1rem 0;
}

.customer-form input {
    width: 100%;
    padding: 0.5rem;
    margin: 0.5rem 0;
}

#cart-total, #order-summary {
    font-weight: bold;
    margin: 1rem 0;
}

#vegetable-list:empty::before {
    content: "Loading vegetables...";
    display: block;
    text-align: center;
    padding: 2rem;
}

#cart-items:empty::before {
    content: "Your cart is empty";
    display: block;
    text-align: center;
    padding: 2rem;
}

#order-confirmation {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #e8f5e9;
}

#place-order-btn {
    margin-top: 1rem;
}

#checkout-btn {
    margin-top: 1rem;
}

#order-summary {
    margin-bottom: 2rem;
}

#cart-count {
    font-weight: bold;
}

#vegetable-list, #cart-items {
    min-height: 200px;
}

#vegetable-list:empty::before, #cart-items:empty::before {
    color: #666;
}

#place-order-btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

#order-confirmation p {
    margin: 0.5rem 0;
}

#order-confirmation strong {
    color: #4CAF50;
}

#vegetable-list .vegetable-card button.out-of-stock {
    background-color: #cccccc;
    cursor: not-allowed;
}

#vegetable-list .vegetable-card button.out-of-stock:hover {
    background-color: #cccccc;
}

button:hover:not(:disabled) {
    background-color: #45a049;
}

nav a:hover {
    text-decoration: underline;
}

h1 {
    margin: 0;
}

h2 {
    color: #333;
}

h3 {
    color: #4CAF50;
}

#cart-items .cart-item button {
    padding: 0.3rem 0.6rem;
    font-size: 0.9rem;
}

#vegetable-list .vegetable-card p {
    margin: 0.5rem 0;
}

#vegetable-list .vegetable-card h3 {
    margin: 0.5rem 0;
    font-size: 1.2rem;
}

#cart-items .cart-item p {
    margin: 0;
}

.customer-form label {
    display: block;
    margin: 0.5rem 0 0.2rem;
}

.customer-form input:focus {
    outline: none;
    border: 2px solid #4CAF50;
}

@media (max-width: 600px) {
    header {
        flex-direction: column;
        align-items: flex-start;
    }

    nav {
        margin-top: 1rem;
    }

    nav a {
        margin: 0 0.5rem;
    }

    .vegetable-grid {
        grid-template-columns: 1fr;
    }
}

# static/js/main.js
let cart = JSON.parse(localStorage.getItem('cart')) || [];

document.addEventListener('DOMContentLoaded', () => {
    updateCartCount();
    if (document.getElementById('vegetable-list')) {
        loadVegetables();
    }
    if (document.getElementById('cart-items')) {
        displayCart();
    }
    if (document.getElementById('order-summary')) {
        displayOrderSummary();
        setupCheckout();
    }
});

async function loadVegetables() {
    try {
        const response = await fetch('/api/vegetables');
        const vegetables = await response.json();
        const vegetableList = document.getElementById('vegetable-list');
        vegetableList.innerHTML = '';
        vegetables.forEach(veg => {
            const card = document.createElement('div');
            card.className = 'vegetable-card';
            card.innerHTML = `
                <h3>${veg.name}</h3>
                <p>$${veg.price.toFixed(2)} per unit</p>
                <p>Stock: ${veg.stock}</p>
                <button ${veg.stock === 0 ? 'class="out-of-stock" disabled' : ''} 
                        onclick="addToCart(${veg.id}, '${veg.name}', ${veg.price})">
                    ${veg.stock === 0 ? 'Out of Stock' : 'Add to Cart'}
                </button>
            `;
            vegetableList.appendChild(card);
        });
    } catch (error) {
        console.error('Error loading vegetables:', error);
        document.getElementById('vegetable-list').innerHTML = '<p>Error loading vegetables</p>';
    }
}

function addToCart(id, name, price) {
    const existingItem = cart.find(item => item.id === id);
    if (existingItem) {
        existingItem.quantity++;
    } else {
        cart.push({ id, name, price, quantity: 1 });
    }
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCount();
    alert(`${name} added to cart!`);
}

function updateCartCount() {
    const cartCount = cart.reduce((sum, item) => sum + item.quantity, 0);
    document.querySelectorAll('#cart-count').forEach(el => {
        el.textContent = cartCount;
    });
}

function displayCart() {
    const cartItems = document.getElementById('cart-items');
    const checkoutBtn = document.getElementById('checkout-btn');
    cartItems.innerHTML = '';
    if (cart.length === 0) {
        checkoutBtn.disabled = true;
        return;
    }

    let total = 0;
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <p>${item.name} x ${item.quantity} - $${itemTotal.toFixed(2)}</p>
            <button onclick="removeFromCart(${item.id})">Remove</button>
        `;
        cartItems.appendChild(cartItem);
    });

    document.getElementById('cart-total').textContent = `Total: $${total.toFixed(2)}`;
    checkoutBtn.disabled = false;
}

function removeFromCart(id) {
    const itemIndex = cart.findIndex(item => item.id === id);
    if (itemIndex !== -1) {
        cart[itemIndex].quantity--;
        if (cart[itemIndex].quantity === 0) {
            cart.splice(itemIndex, 1);
        }
        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartCount();
        displayCart();
    }
}

function displayOrderSummary() {
    const orderSummary = document.getElementById('order-summary');
    let total = 0;
    orderSummary.innerHTML = '<h3>Order Summary</h3>';
    cart.forEach(item => {
        const itemTotal = item.price * item.quantity;
        total += itemTotal;
        orderSummary.innerHTML += `
            <p>${item.name} x ${item.quantity} - $${itemTotal.toFixed(2)}</p>
        `;
    });
    orderSummary.innerHTML += `<p><strong>Total: $${total.toFixed(2)}</strong></p>`;
}

function setupCheckout() {
    const placeOrderBtn = document.getElementById('place-order-btn');
    const nameInput = document.getElementById('name');
    const addressInput = document.getElementById('address');
    const emailInput = document.getElementById('email');

    function validateInputs() {
        const isValid = nameInput.value.trim() && addressInput.value.trim() && emailInput.value.trim();
        placeOrderBtn.disabled = !isValid;
    }

    nameInput.addEventListener('input', validateInputs);
    addressInput.addEventListener('input', validateInputs);
    emailInput.addEventListener('input', validateInputs);

    placeOrderBtn.addEventListener('click', async () => {
        const order = {
            items: cart,
            total: cart.reduce((sum, item) => sum + item.price * item.quantity, 0),
            customer: {
                name: nameInput.value,
                address: addressInput.value,
                email: emailInput.value
            }
        };

        try {
            const response = await fetch('/api/order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(order)
            });
            const result = await response.json();
            document.getElementById('order-confirmation').style.display = 'block';
            document.getElementById('order-confirmation').innerHTML = `
                <p><strong>Order placed successfully!</strong></p>
                <p>Order ID: ${result.order_id}</p>
                <p>Thank you for shopping with VeggieMart!</p>
            `;
            cart = [];
            localStorage.setItem('cart', JSON.stringify(cart));
            updateCartCount();
            document.querySelector('.customer-form').style.display = 'none';
        } catch (error) {
            console.error('Error placing order:', error);
            document.getElementById('order-confirmation').style.display = 'block';
            document.getElementById('order-confirmation').innerHTML = '<p>Error placing order. Please try again.</p>';
        }
    });
}